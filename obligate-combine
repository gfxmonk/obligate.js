#!/usr/bin/env python
import logging
import os
import json

# each loader is called with a local `exports` variable in context
def js_loader(contents):
	return contents
def sjs_loader(contents):
	return """
		var module = {
			exports: exports
		};
		var compile = require('sjs:apollo-sys').require.extensions.sjs;
		compile(""" + json.dumps(contents) + """, module);
		"""

loaders = {
	'.js': js_loader,
	'.sjs': sjs_loader
}

def main():
	from optparse import OptionParser
	p = OptionParser("Usage: %prog [options] js_root")
	p.add_option('-v', '--verbose', action='store_true')
	opts, args = p.parse_args()
	level = logging.DEBUG if opts.verbose else logging.INFO
	logging.basicConfig(level=level, format='%(message)s')

	try:
		(base,) = args
	except ValueError,e:
		p.print_usage()
		return 1

	modules = {}
	for path, dirs, files in os.walk(base):
		for filename in files:
			_ignore, ext = os.path.splitext(filename)
			if ext in loaders:
				fullpath = os.path.join(path, filename)
				with open(fullpath) as infile:
					commonprefix = os.path.commonprefix((base, fullpath))
					relative_path = fullpath[len(commonprefix):].lstrip(os.path.sep)
					modules[relative_path] = loaders[ext](infile.read())

	with open('obligate-modules.js', 'w') as outfile:
		for path, contents in modules.items():
			outfile.write('Obligate.def(' + json.dumps(path) + ", (function(exports) {" + contents + "}));\n\n")

if __name__ == '__main__':
	import sys
	sys.exit(main())


